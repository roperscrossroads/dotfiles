#!/usr/bin/env bash
# source "$DOROTHY/sources/strict.bash"

# NOTE: [git] is assumed to exist

# TODO: ORDER of install
# ~ [x] symlink basic xdg configs
# ~ [x] make sure GHQ_ROOT exists
# ~ clone GHQ
# ~ strongbox?

# Functions =================================

#function pull_molleweide_latest() {
#  pushd $DOROTHY/user >/dev/null 2>&1
#  echo "doro user pwd: $PWD"
#  popd >/dev/null 2>&1
#}

# handle basic configs and special cases.
# WARN: It turns out that the dorothy's symlink-helper command is very slow,
# even if --quiet
function setup_basic_xdg_config_symlinks() {
  echo-style --h1="SETTING UP USER SYMLINKS"
  local DORO_USER_XDG="$DOROTHY/user/config.xdg"
  local DORO_USER_XDG_HIDDEN="$DOROTHY/user/config.local/config.xdg"
  local CONFIG_PATHS=(
    "$DORO_USER_XDG"
    "$DORO_USER_XDG_HIDDEN"
  )
  local SPECIAL_CASES_DO_NOT_GO_INTO_CONFIG_HOME=(
    "qutebrowser"
  )
  function handle_symlink_for_entry() {
    local origin_entry_path current_tool_name
    origin_entry_path=$1
    current_tool_name="$(basename "$origin_entry_path")"
    if test "$current_tool_name" = "_ignore_these"; then
      return
    fi
    if ! is-needle --needle="$current_tool_name" -- "${SPECIAL_CASES_DO_NOT_GO_INTO_CONFIG_HOME[@]}"; then
      symlink-helper --existing="$origin_entry_path" \
        --symlink="$XDG_CONFIG_HOME/$(basename "$origin_entry_path")" # \ --quiet
    else
      # handle special cases
      case "$current_tool_name" in
      "qutebrowser")
        symlink-helper --existing="$origin_entry_path" --symlink="$HOME/$current_tool_name" \
          --log-if-overriding-file # \ --quiet --log-if-overriding-symlink
        ;;
      *)
        echo "How to handle symlink of config for special case tool [$current_tool_name] has not yet been setup!" ...
        ;;
      esac
    fi
  }
  for cp in "${CONFIG_PATHS[@]}"; do
    for origin_entry_path in "$cp"/*; do
      handle_symlink_for_entry "$origin_entry_path"
    done
  done
  echo-style --g1="SETTING UP USER SYMLINKS"
}

# # depents on GHQ so it needs to be called after setting up
# # basic configs.
# function setup_doom_neovim_config() {
#   echo-header "SETTING UP NEOVIM..."
#   # doom_nvim_dir="$HOME/code/doom-nvim"
#   # if [ ! -d "$HOME/code/doom-nvim" ]; then
#   # 	git clone git@github.com:molleweide/doom-nvim.git "$doom_nvim_dir"
#   # fi
#   # local doom_path="$GHQ_ROOT_GH_USER/doom-nvim"
#   # echo "$doom_path"
#   symlink-helper --existing="$GHQ_ROOT_GH_USER/doom-nvim" --symlink="$XDG_CONFIG_HOME/nvim"
# }

# Add setting up plugin manager and linking config to the setup-util-tmux
function setup_tmux_user() {
  local TMUX_PLUG_DIR="$HOME/.config/tmux/plugins/tpm"
  [ ! -d "$TMUX_PLUG_DIR" ] && git clone git@github.com:tmux-plugins/tpm.git "$TMUX_PLUG_DIR"
  install_script="$TMUX_PLUG_DIR/bin/install_plugins"
  if [ -x "$install_script" ]; then
    $install_script
  fi
}

function setup_neorg_notes() {
  if [ ! -d "$HOME/neorg" ]; then
    git clone git@github.com:molleweide/neorg_user.git "$HOME/neorg"
  fi
}

function setup_osx() {
  # setup-user-osx
  :
}


function setup_keyboard() {
  :
}

function setup_obs() {
  # ~/Library/Application Support/obs-studio/
  # ~/.config/obs-studio/
  :
}

# Act =================================

setup_basic_xdg_config_symlinks

if ! command-exists -- ghq; then
  setup-util-ghq
fi

GHQ_ROOT=$(ghq root)
GHQ_ROOT_GH_USER="$GHQ_ROOT/github.com/roperscrossroads"

#ghm restore "doom-nvim"

#symlink-helper --existing="$GHQ_ROOT_GH_USER/doom-nvim" --symlink="$XDG_CONFIG_HOME/nvim"

setup_tmux_user

#setup_neorg_notes

#setup_osx
